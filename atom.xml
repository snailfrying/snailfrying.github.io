<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Snail Life</title>
  <icon>http://yoursite.com/icon.png</icon>
  <subtitle>basketball dance rap</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-20T09:18:08.188Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>snail json</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spark与pandas 如何构建分类模型</title>
    <link href="http://yoursite.com/2020/01/20/spark%E4%B8%8Epandas-%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E5%88%86%E7%B1%BB%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/01/20/spark与pandas-如何构建分类模型/</id>
    <published>2020-01-20T08:34:48.000Z</published>
    <updated>2020-01-20T09:18:08.188Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;spark与pandas-如何构建分类模型&quot;&gt;&lt;a href=&quot;#spark与pandas-如何构建分类模型&quot; class=&quot;headerlink&quot; title=&quot;spark与pandas 如何构建分类模型&quot;&gt;&lt;/a&gt;spark与pandas 如何构建分类模型&lt;/h2&gt;&lt;p&gt;本章通过sklearn，鸢尾花数据，通过pandas的DataFrame与spark的DataFrame之间转化，构建spark多分类模型，并且图调参以及得到最佳参数和评价分数。具体代码流程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;h6 id=&quot;导入相关工具包&quot;&gt;&lt;a href=&quot;#导入相关工具包&quot; class=&quot;headerlink&quot; title=&quot;导入相关工具包&quot;&gt;&lt;/a&gt;导入相关工具包&lt;/h6&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;  sklearn.datasets &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; sd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pyspark.context &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; SparkContext&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pyspark.sql.context &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;  SparkSession&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pyspark.sql &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Row&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pyspark.ml.linalg &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Vectors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pyspark.mllib.regression &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; LabeledPoint&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pyspark.ml.tuning &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; ParamGridBuilder,CrossValidator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pyspark.ml.classification &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; LogisticRegression&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pyspark.mllib.classification &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; LogisticRegressionWithLBFGS, LogisticRegressionModel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; pyspark.ml.evaluation &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; MulticlassClassificationEvaluator,BinaryClassificationEvaluator&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="spark" scheme="http://yoursite.com/categories/spark/"/>
    
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>chapter6-python实现TensorFlow-logistic</title>
    <link href="http://yoursite.com/2020/01/09/chapter6-python%E5%AE%9E%E7%8E%B0TensorFlow-logistic/"/>
    <id>http://yoursite.com/2020/01/09/chapter6-python实现TensorFlow-logistic/</id>
    <published>2020-01-09T11:21:00.000Z</published>
    <updated>2020-01-10T01:35:59.170Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;hr&gt;
&lt;p&gt;版权声明：&lt;/p&gt;
&lt;h2 id=&quot;除非注明，本博文章均为原创，转载请以链接形式标明本文地址。&quot;&gt;&lt;a href=&quot;#除非注明，本博文章均为原创，转载请以链接形式标明本文地址。&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>chapter5-逻辑斯谛回归-LogisticRegression</title>
    <link href="http://yoursite.com/2019/11/20/chapter5-%E9%80%BB%E8%BE%91%E6%96%AF%E8%B0%9B%E5%9B%9E%E5%BD%92-LogisticRegression/"/>
    <id>http://yoursite.com/2019/11/20/chapter5-逻辑斯谛回归-LogisticRegression/</id>
    <published>2019-11-20T12:14:04.000Z</published>
    <updated>2019-12-30T10:48:03.822Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;chapter5-逻辑斯谛回归-LogisticRegression&quot;&gt;&lt;a href=&quot;#chapter5-逻辑斯谛回归-LogisticRegression&quot; class=&quot;headerlink&quot; title=&quot;chapter5-逻辑斯谛回归-LogisticRegression&quot;&gt;&lt;/a&gt;chapter5-逻辑斯谛回归-LogisticRegression&lt;/h3&gt;&lt;h4 id=&quot;statistics-learning&quot;&gt;&lt;a href=&quot;#statistics-learning&quot; class=&quot;headerlink&quot; title=&quot;statistics learning&quot;&gt;&lt;/a&gt;statistics learning&lt;/h4&gt;&lt;h5 id=&quot;1-浅谈线性回归&quot;&gt;&lt;a href=&quot;#1-浅谈线性回归&quot; class=&quot;headerlink&quot; title=&quot;1.浅谈线性回归&quot;&gt;&lt;/a&gt;1.浅谈线性回归&lt;/h5&gt;&lt;p&gt;由于前面&lt;a href=&quot;https://snailfrying.github.io/2019/11/20/chapter2-最小二乘法完整实践理论/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;最小二乘法&lt;/a&gt;和&lt;a href=&quot;https://snailfrying.github.io/2019/11/20/chapter4-梯度下降算法-Gradient-Descent/#more&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;梯度下降算法&lt;/a&gt;，已经大力讨论了回归模型，因此，本章只进行简单的回顾回归模型。分析线性回归原理和与最小二乘法之间的区别。&lt;/p&gt;
&lt;p&gt;线性回归与最小二乘法的最大区别，就在于损失函数的迭代。也就是如何优化损失函数。最小二乘法顾名思义，就是采用最小二乘法进行迭代，损失函数如下：&lt;br&gt;$$&lt;br&gt;J(\theta_0,\theta_1,\cdots,\theta_j) =\sum_{i=1}^m(h_θ(x_0^{(i)},x_1^{(i)},\cdots,x_j^{(i)}) - y^{(j)})^2=\sum_{i=1}^n(\sum_{j=1}^m\theta_jx_j^{(i)}-y^{(i)})^2&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;对损失函数求导为，更新参数$\theta$：&lt;br&gt;$$&lt;br&gt;\theta = (X^TX)^-1X^TY&lt;br&gt;$$&lt;br&gt;对于线性回归算法来说，就是利用梯度下降算法，损失函数如下：&lt;br&gt;$$&lt;br&gt;J(\theta_0,\theta_1,\cdots,\theta_j) =\frac{1}{2m}\sum_{i=1}^m(h_θ(x_0^{(i)},x_1^{(i)},\cdots,x_j^{(i)}) - y^{(j)})^2=\frac{1}{2m}\sum_{i=1}^n(\sum_{j=1}^m\theta_jx_j^{(i)}-y^{(i)})^2&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;对损失函数求偏导，更新参数$\theta$：&lt;br&gt;$$&lt;br&gt;\theta = \theta-\alpha X^T(\theta X-Y)&lt;br&gt;$$&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>chapter2 最小二乘法完整实践理论</title>
    <link href="http://yoursite.com/2019/11/20/chapter2-%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95%E5%AE%8C%E6%95%B4%E5%AE%9E%E8%B7%B5%E7%90%86%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/11/20/chapter2-最小二乘法完整实践理论/</id>
    <published>2019-11-20T12:14:04.000Z</published>
    <updated>2019-12-26T11:49:03.322Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;chapter2-最小二乘法完整实践理论&quot;&gt;&lt;a href=&quot;#chapter2-最小二乘法完整实践理论&quot; class=&quot;headerlink&quot; title=&quot;chapter2- 最小二乘法完整实践理论&quot;&gt;&lt;/a&gt;chapter2- 最小二乘法完整实践理论&lt;/h3&gt;&lt;h6 id=&quot;1-概要&quot;&gt;&lt;a href=&quot;#1-概要&quot; class=&quot;headerlink&quot; title=&quot;1.概要&quot;&gt;&lt;/a&gt;1.概要&lt;/h6&gt;&lt;p&gt;​    此章，通过最小二乘法，在统计学习，机器学习，深度学习的轨道上进行讨论，它们叁之间的共性与异性。&lt;/p&gt;
&lt;h6 id=&quot;2-什么是最小二乘法&quot;&gt;&lt;a href=&quot;#2-什么是最小二乘法&quot; class=&quot;headerlink&quot; title=&quot;2.什么是最小二乘法&quot;&gt;&lt;/a&gt;2.什么是最小二乘法&lt;/h6&gt;&lt;p&gt;​    &lt;strong&gt;最小二乘法&lt;/strong&gt;（&lt;strong&gt;least squares method&lt;/strong&gt;），又称&lt;strong&gt;最小平方法&lt;/strong&gt;，是一种&lt;a href=&quot;https://zh.wikipedia.org/wiki/数学&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数学&lt;/a&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/优化&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;优化&lt;/a&gt;方法。它通过最小化&lt;a href=&quot;https://zh.wikipedia.org/wiki/误差&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;误差&lt;/a&gt;的平方和寻找数据的最佳函数匹配。&lt;/p&gt;
&lt;p&gt;​    利用最小二乘法可以简便地求得未知的数据，并使得求得的数据与实际数据之间误差的平方和为最小。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>chapter6-神经网络</title>
    <link href="http://yoursite.com/2019/11/20/chapter6-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2019/11/20/chapter6-神经网络/</id>
    <published>2019-11-20T12:14:04.000Z</published>
    <updated>2020-01-10T01:46:36.780Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;hr&gt;
&lt;h2 id=&quot;chapter6-神经网络（neural-networks）&quot;&gt;&lt;a href=&quot;#chapter6-神经网络（neural-networks）&quot; class=&quot;headerlink&quot; title=&quot;chapter6-神经网络（neural
        
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>chapter4-梯度下降算法(Gradient Descent)</title>
    <link href="http://yoursite.com/2019/11/20/chapter4-%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95-Gradient-Descent/"/>
    <id>http://yoursite.com/2019/11/20/chapter4-梯度下降算法-Gradient-Descent/</id>
    <published>2019-11-20T12:14:04.000Z</published>
    <updated>2019-12-24T08:52:08.975Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;hr&gt;
&lt;h3 id=&quot;chapter4-梯度下降算法-Gradient-Descent&quot;&gt;&lt;a href=&quot;#chapter4-梯度下降算法-Gradient-Descent&quot; class=&quot;headerlink&quot; title=&quot;chapter4-梯度下降算法(Gradient Descent)&quot;&gt;&lt;/a&gt;chapter4-梯度下降算法(Gradient Descent)&lt;/h3&gt;&lt;p&gt;求解机器学习算法的模型参数时，即无约束优化问题时，梯度下降（Gradient Descent）是最常采用的方法之一，另一种常用的方法是最小二乘法。这里就对梯度下降法做一个完整的总结。&lt;/p&gt;
&lt;h5 id=&quot;1-梯度&quot;&gt;&lt;a href=&quot;#1-梯度&quot; class=&quot;headerlink&quot; title=&quot;1.梯度&quot;&gt;&lt;/a&gt;1.梯度&lt;/h5&gt;&lt;p&gt;在微积分里面，对多元函数的参数求∂偏导数，把求得的各个参数的偏导数以向量的形式写出来，就是梯度。比如函数$f(x,y)$,分别对$x,y$进行求导，求得梯度向量是$(\frac{\partial f}{\partial x},\frac{\partial f}{\partial y})^T$ 简称$grad f(x,y)$ | $\Delta f(x,y)$,对于点为$(x_0,y_0)$,他的梯度向量值为$(\frac{\partial f}{\partial x_0},\frac{\partial f}{\partial y_0})^T$ | $\Delta f(x_0,y_0)$,如果为三个变量，就为：$\Delta f(x,y,z)$,以此类推。&lt;/p&gt;
&lt;p&gt;那为什么要找到函数$f(x,y)$的梯度呢？因为梯度向量是函数下降(增加)速度最快的地方。比如说，在初始点$(x_0,y_0)$ 沿着梯度向量$\Delta f(x_0,y_0)$ (-$\Delta f(x_0,y_0)$)，增加最快(下降最快)的方向 ，我们能够更快的找到函数的最小值(最大值)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>chapter3-感知机</title>
    <link href="http://yoursite.com/2019/11/20/chapter3-%E6%84%9F%E7%9F%A5%E6%9C%BA/"/>
    <id>http://yoursite.com/2019/11/20/chapter3-感知机/</id>
    <published>2019-11-20T12:14:04.000Z</published>
    <updated>2019-12-24T02:29:32.035Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;chapter3-感知机&quot;&gt;&lt;a href=&quot;#chapter3-感知机&quot; class=&quot;headerlink&quot; title=&quot;chapter3-感知机&quot;&gt;&lt;/a&gt;chapter3-感知机&lt;/h2&gt;&lt;h5 id=&quot;1-概要&quot;&gt;&lt;a href=&quot;#1-概要&quot; class=&quot;headerlink&quot; title=&quot;1.概要&quot;&gt;&lt;/a&gt;1.概要&lt;/h5&gt;&lt;p&gt;通过上一章最小二乘法的理论与实践，我们知道统计学学习-机器学习-深度学习，它们之间的联系与区别。本章我们将讨论感知机算法，再次讨论他们叁之间的关系。并且很有必要熟悉感知机，虽然它现在在分类模型当中已经不适用，因为泛化能力有限，能力更强的为支撑向量机(svm)。但是它在机器学习和深度学习其他深奥算法上有较大的联系，甚至为其算法逻辑实现基础。掌握它的思想，为进一步的提升，打下坚实的基础。&lt;/p&gt;
&lt;h5 id=&quot;2-感知机模型原理&quot;&gt;&lt;a href=&quot;#2-感知机模型原理&quot; class=&quot;headerlink&quot; title=&quot;2.感知机模型原理&quot;&gt;&lt;/a&gt;2.感知机模型原理&lt;/h5&gt;&lt;p&gt;首先感知机算法是一种二分类线性算法。当然也可以提升至多维分类模型上，但是都是线性模型，对于非线性的，神经网络了解一下。感知机学习算法：用一个函数输入$x$(一个实值的向量)映射到输出值$f(x)$(一个二元值):&lt;br&gt;$$&lt;br&gt;f(x)=\begin{cases}&lt;br&gt;    1 \qquad if \quad w.x + b &amp;gt; 0 \ \&lt;br&gt;    -1 \qquad other wise&lt;br&gt;\end{cases}&lt;br&gt;$$&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>chapter1-统计学习与深度学习方法概论</title>
    <link href="http://yoursite.com/2019/11/19/chapter1-%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/"/>
    <id>http://yoursite.com/2019/11/19/chapter1-统计学习与深度学习方法概论/</id>
    <published>2019-11-19T12:13:13.000Z</published>
    <updated>2019-12-09T10:38:03.437Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;chapter1-统计学习方法与深度学习方法概论&quot;&gt;&lt;a href=&quot;#chapter1-统计学习方法与深度学习方法概论&quot; class=&quot;headerlink&quot; title=&quot;chapter1-统计学习方法与深度学习方法概论&quot;&gt;&lt;/a&gt;chapter1-统计学习方法与深度学习方法概论&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;h6 id=&quot;什么是统计学-statistics-learning&quot;&gt;&lt;a href=&quot;#什么是统计学-statistics-learning&quot; class=&quot;headerlink&quot; title=&quot;什么是统计学(statistics learning)&quot;&gt;&lt;/a&gt;什么是统计学(statistics learning)&lt;/h6&gt;&lt;p&gt;​       统计学习是关于计算机基于数据构建概率统计模型并运用模型对数据进行分析与预测的一门学科。统计学习包括监督学习、非监督学习、半监督学习和强化学习。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h6 id=&quot;统计学三要素&quot;&gt;&lt;a href=&quot;#统计学三要素&quot; class=&quot;headerlink&quot; title=&quot;统计学三要素&quot;&gt;&lt;/a&gt;统计学三要素&lt;/h6&gt;&lt;p&gt;​                                                        方法 = 模型 + 策略 + 算法&lt;/p&gt;
&lt;p&gt;​      模型、策略 、算法三要素是理解统计学习中，起到提纲挈领的作用。&lt;/p&gt;
&lt;p&gt;​      模型(model)：亦为假设空间(hypothesis),包含所有可能的概率分布或者决策函数。&lt;/p&gt;
&lt;p&gt;​      策略(strategy): 亦为评价准则(evaluation  criterion)，评价模型经验风险最小化与结构风险最小化。不同模型有不同的风险函数&lt;/p&gt;
&lt;p&gt;​      算法(algorithm): 学习模型的具体计算方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>statistics algorithms learning</title>
    <link href="http://yoursite.com/2019/11/15/statistics-algorithms-learning/"/>
    <id>http://yoursite.com/2019/11/15/statistics-algorithms-learning/</id>
    <published>2019-11-15T08:52:59.000Z</published>
    <updated>2019-11-19T12:13:42.235Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/fengdu78/lihang-code&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;李航统计学代码实现&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;李航-统计学与吴恩达-深度学习理论与代码实践&quot;&gt;&lt;a href=&quot;#李航-统计学与吴恩达-深度学习理论与代码实践&quot; class=&quot;headerlink&quot; title=&quot;李航-统计学与吴恩达-深度学习理论与代码实践&quot;&gt;&lt;/a&gt;李航-统计学与吴恩达-深度学习理论与代码实践&lt;/h2&gt;&lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;h5 id=&quot;统计学习方法与深度学习概论-最小二乘法完整实践理论-感知机-统计学与深度学习中的回归&quot;&gt;&lt;a href=&quot;#统计学习方法与深度学习概论-最小二乘法完整实践理论-感知机-统计学与深度学习中的回归&quot; class=&quot;headerlink&quot; title=&quot;统计学习方法与深度学习概论     最小二乘法完整实践理论    感知机    统计学与深度学习中的回归&quot;&gt;&lt;/a&gt;统计学习方法与深度学习概论     最小二乘法完整实践理论    感知机    统计学与深度学习中的回归&lt;/h5&gt;&lt;h5 id=&quot;支持向量机-FM与FFM…-k近邻算法-决策树-随机森林-极限树-提升算法-xgboost&quot;&gt;&lt;a href=&quot;#支持向量机-FM与FFM…-k近邻算法-决策树-随机森林-极限树-提升算法-xgboost&quot; class=&quot;headerlink&quot; title=&quot;支持向量机    FM与FFM…    k近邻算法    决策树    随机森林    极限树    提升算法    xgboost&quot;&gt;&lt;/a&gt;支持向量机    FM与FFM…    k近邻算法    决策树    随机森林    极限树    提升算法    xgboost&lt;/h5&gt;&lt;h5 id=&quot;lightgbm-catboost-EM算法以及推广-朴素贝叶斯-循环神经网络-隐尔马可夫模型&quot;&gt;&lt;a href=&quot;#lightgbm-catboost-EM算法以及推广-朴素贝叶斯-循环神经网络-隐尔马可夫模型&quot; class=&quot;headerlink&quot; title=&quot;lightgbm    catboost    EM算法以及推广    朴素贝叶斯    循环神经网络    隐尔马可夫模型&quot;&gt;&lt;/a&gt;lightgbm    catboost    EM算法以及推广    朴素贝叶斯    循环神经网络    隐尔马可夫模型&lt;/h5&gt;&lt;h5 id=&quot;卷积神经网络-条件随机场-监督学习方法总结-无监督学习概论-强化学习&quot;&gt;&lt;a href=&quot;#卷积神经网络-条件随机场-监督学习方法总结-无监督学习概论-强化学习&quot; class=&quot;headerlink&quot; title=&quot;卷积神经网络    条件随机场    监督学习方法总结    无监督学习概论    强化学习&quot;&gt;&lt;/a&gt;卷积神经网络    条件随机场    监督学习方法总结    无监督学习概论    强化学习&lt;/h5&gt;&lt;h5 id=&quot;autoML&quot;&gt;&lt;a href=&quot;#autoML&quot; class=&quot;headerlink&quot; title=&quot;autoML&quot;&gt;&lt;/a&gt;autoML&lt;/h5&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
      <category term="algorithms" scheme="http://yoursite.com/categories/python/algorithms/"/>
    
    
      <category term="statistics" scheme="http://yoursite.com/tags/statistics/"/>
    
  </entry>
  
  <entry>
    <title>vim技巧</title>
    <link href="http://yoursite.com/2019/11/09/vim%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2019/11/09/vim技巧/</id>
    <published>2019-11-09T06:38:42.000Z</published>
    <updated>2019-11-11T02:32:53.971Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/fengyuhetao/shell&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;shell脚本案列大全&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tinylab.org/open-shell-book/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;shell系列教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zh-google-styleguide.readthedocs.io/en/latest/google-shell-styleguide/formatting/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;goole-shell开发规范&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-vim总结技巧&quot;&gt;&lt;a href=&quot;#1-vim总结技巧&quot; class=&quot;headerlink&quot; title=&quot;1.vim总结技巧&quot;&gt;&lt;/a&gt;1.vim总结技巧&lt;/h2&gt;&lt;h4 id=&quot;vim键盘图&quot;&gt;&lt;a href=&quot;#vim键盘图&quot; class=&quot;headerlink&quot; title=&quot;vim键盘图&quot;&gt;&lt;/a&gt;vim键盘图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/uploads/loading.gif&quot; data-original=&quot;https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="-巧技" scheme="http://yoursite.com/categories/%E5%B7%A7%E6%8A%80/"/>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>hive 脚本用户 and beeline</title>
    <link href="http://yoursite.com/2019/11/09/hive-%E8%84%9A%E6%9C%AC%E7%94%A8%E6%88%B7-and-beeline/"/>
    <id>http://yoursite.com/2019/11/09/hive-脚本用户-and-beeline/</id>
    <published>2019-11-09T05:57:26.000Z</published>
    <updated>2019-11-22T10:20:24.212Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;[https://cwiki.apache.org/confluence/display/Hive/HiveServer2+Clients#HiveServer2Clients-Beeline%E2%80%93NewCommandLineShell](https://cwiki.apache.org/confluence/display/Hive/HiveServer2+Clients#HiveServer2Clients-Beeline–NewCommandLineShell)&quot;&gt;&lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/HiveServer2+Clients&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HiveServer2 Clients&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;HiveServer2Clients简介&quot;&gt;&lt;a href=&quot;#HiveServer2Clients简介&quot; class=&quot;headerlink&quot; title=&quot;HiveServer2Clients简介&quot;&gt;&lt;/a&gt;HiveServer2Clients简介&lt;/h4&gt;&lt;h6 id=&quot;1-beeline是什么&quot;&gt;&lt;a href=&quot;#1-beeline是什么&quot; class=&quot;headerlink&quot; title=&quot;1.beeline是什么&quot;&gt;&lt;/a&gt;1.beeline是什么&lt;/h6&gt;&lt;p&gt;​    Beeline，是HiveServer2的JDBC客户端，基于SQLLine命令行接口。Beeline Shell可以工作在嵌入式模式和远程模式，在嵌入式模式中，它运行一个嵌入式的Hive（类似于Hive CLI），在远程模式中，通过Thrift连接到一个单独的HiveServer2进程，从Hive 0.14开始，当Beeline和HiveServer2一起使用时，它会从HiveServer2打印执行查询的日志信息到STDERR。建议在生产环境使用远程HiveServer2模式，因为这样更安全，不需要为用户授予直接的HDFS/Metastore访问权限&lt;/p&gt;
    
    </summary>
    
    
      <category term="hive" scheme="http://yoursite.com/categories/hive/"/>
    
    
  </entry>
  
  <entry>
    <title>linux菜鸟</title>
    <link href="http://yoursite.com/2019/11/05/linux%E8%8F%9C%E9%B8%9F/"/>
    <id>http://yoursite.com/2019/11/05/linux菜鸟/</id>
    <published>2019-11-05T08:26:36.000Z</published>
    <updated>2019-11-09T08:51:01.352Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;菜鸟-linux命令总结&quot;&gt;&lt;a href=&quot;#菜鸟-linux命令总结&quot; class=&quot;headerlink&quot; title=&quot;菜鸟-linux命令总结&quot;&gt;&lt;/a&gt;菜鸟-linux命令总结&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jaywcjlove/linux-command&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;linux命令大全教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://man.linuxde.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;linux搜索大全&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wangchujiang.com/linux-command/list.html#!kw=ls&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;linux命令搜索教程岚&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/judasn/Linux-Tutorial&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;linux安装教程-bigData&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/fengyuhetao/shell&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;shell脚本案列大全&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-命令大全&quot;&gt;&lt;a href=&quot;#1-命令大全&quot; class=&quot;headerlink&quot; title=&quot;1. 命令大全&quot;&gt;&lt;/a&gt;1. 命令大全&lt;/h4&gt;&lt;h5 id=&quot;文件传输&quot;&gt;&lt;a href=&quot;#文件传输&quot; class=&quot;headerlink&quot; title=&quot;文件传输&quot;&gt;&lt;/a&gt;文件传输&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bye、ftp、ftpcount、ftpshut、ftpwho、ncftp、tftp、uucico、uucp、uupick、uuto、scp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Win10设置电脑内网连接网线，外网连接wifi</title>
    <link href="http://yoursite.com/2019/11/04/Win10%E8%AE%BE%E7%BD%AE%E7%94%B5%E8%84%91%E5%86%85%E7%BD%91%E8%BF%9E%E6%8E%A5%E7%BD%91%E7%BA%BF%EF%BC%8C%E5%A4%96%E7%BD%91%E8%BF%9E%E6%8E%A5wifi/"/>
    <id>http://yoursite.com/2019/11/04/Win10设置电脑内网连接网线，外网连接wifi/</id>
    <published>2019-11-04T10:05:42.000Z</published>
    <updated>2019-12-16T11:35:32.968Z</updated>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Win10设置电脑内网连接网线，外网连接wifi&quot;&gt;&lt;a href=&quot;#Win10设置电脑内网连接网线，外网连接wifi&quot; class=&quot;headerlink&quot; title=&quot;Win10设置电脑内网连接网线，外网连接wifi&quot;&gt;&lt;/a&gt;Win10设置电脑内网连接网线，外网连接wifi&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;win10一台电脑即可使用内网又可使用外网原理&lt;/p&gt;
&lt;p&gt;​    您可以把电脑比喻为一个路由器。就像打电话的移动服务器一样，一台服务器可以多个用户使用，就是因为每一个用户有专用的电话号码，然后通过中转服务器转到你所到达的属地，再到达相应的用用户。&lt;/p&gt;
&lt;p&gt;​    所以你就是用户，电脑就是中转器，你访问不同的页面，通过路由转到不同的网段，就可以使用相应的网络了。当然内网和外网是有优先级的。也就是说你访问的网页，优先使用哪一个网段。选取看你电脑哪一个网段是常用的。比如说我，外网常用，当然使用外网，并且外网的访问ip是很复杂的，分配网段比较复杂，分配内容比较容易。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="巧技" scheme="http://yoursite.com/categories/%E5%B7%A7%E6%8A%80/"/>
    
    
  </entry>
  
  <entry>
    <title>asyncc实践</title>
    <link href="http://yoursite.com/2019/10/31/asyncc%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2019/10/31/asyncc实践/</id>
    <published>2019-10-31T02:55:32.000Z</published>
    <updated>2019-10-31T05:15:19.129Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;协程异步实践&quot;&gt;&lt;a href=&quot;#协程异步实践&quot; class=&quot;headerlink&quot; title=&quot;协程异步实践&quot;&gt;&lt;/a&gt;协程异步实践&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;[https://hubertroy.gitbooks.io/aiohttp-chinese-documentation/content/aiohttp%E6%96%87%E6%A1%A3/Introduce.html](https://hubertroy.gitbooks.io/aiohttp-chinese-documentation/content/aiohttp文档/Introduce.html)&quot;&gt;aiohttp&lt;/a&gt;: 是一个为Python提供异步HTTP 客户端/服务端编程，基于&lt;a href=&quot;https://aiohttp.readthedocs.io/en/stable/glossary.html#term-asyncio&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;asyncio(Python用于支持异步编程的标准库)&lt;/a&gt;的异步库。&lt;/p&gt;
&lt;p&gt;​    此代码，通过aiohttp异步请求四个网页，并且异步解析网页，存储为四个文件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="thread" scheme="http://yoursite.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>chapter2_array_matrix_algorithm</title>
    <link href="http://yoursite.com/2019/10/30/chapter2-array-matrix-algorithm/"/>
    <id>http://yoursite.com/2019/10/30/chapter2-array-matrix-algorithm/</id>
    <published>2019-10-30T11:44:55.000Z</published>
    <updated>2020-01-20T08:23:42.245Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;chapter2-array-matrix-algorithm&quot;&gt;&lt;a href=&quot;#chapter2-array-matrix-algorithm&quot; class=&quot;headerlink&quot; title=&quot;chapter2_array_matrix_algorithm&quot;&gt;&lt;/a&gt;chapter2_array_matrix_algorithm&lt;/h3&gt;&lt;p&gt;此章节过于leetcode类，全部是关于数组与矩阵方面的算法题，包括解题思路，以及Python代码&lt;/p&gt;
&lt;figure class=&quot;highlight angelscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt; 把数组中的 &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; 移到末尾&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;def moveZeroes():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #遍历，数组，前面记住不为&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;的值，往依次迁移，遍历完数组，除记录不为&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;的数，直接填充为&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nums = [ &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vn = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i,v &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; enumerate(nums):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; v != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            nums[vn] = v&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            vn += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nums[vn:] = [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]*(len(nums)-vn)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(nums)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>chapter1_string_algorithm</title>
    <link href="http://yoursite.com/2019/10/30/chapter1-string-algorithm/"/>
    <id>http://yoursite.com/2019/10/30/chapter1-string-algorithm/</id>
    <published>2019-10-30T11:44:55.000Z</published>
    <updated>2020-01-20T08:23:48.976Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;chapter1-string-algorithm&quot;&gt;&lt;a href=&quot;#chapter1-string-algorithm&quot; class=&quot;headerlink&quot; title=&quot;chapter1_string_algorithm&quot;&gt;&lt;/a&gt;chapter1_string_algorithm&lt;/h2&gt;&lt;p&gt;此章节过于leetcode类，全部是关于字符串方面的算法题，包括解题思路，以及Python代码&lt;/p&gt;
&lt;h2 id=&quot;1-1-旋转字符串&quot;&gt;&lt;a href=&quot;#1-1-旋转字符串&quot; class=&quot;headerlink&quot; title=&quot;1.1 旋转字符串&quot;&gt;&lt;/a&gt;1.1 旋转字符串&lt;/h2&gt;&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个字符串，要求把字符串前面的若干个字符移动到字符串的尾部，如把字符串“abcdef”前面的2个字符’a’和’b’移动到字符串的尾部，使得原字符串变成字符串“cdefab”。请写一个函数完成此功能，要求对长度为n的字符串操作的时间复杂度为 O(n)，空间复杂度为 O(1)。&lt;/p&gt;
&lt;h4 id=&quot;方法：三步反转法&quot;&gt;&lt;a href=&quot;#方法：三步反转法&quot; class=&quot;headerlink&quot; title=&quot;方法：三步反转法&quot;&gt;&lt;/a&gt;方法：三步反转法&lt;/h4&gt;&lt;p&gt;对于这个问题，换一个角度思考一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python algorithms string</title>
    <link href="http://yoursite.com/2019/10/30/python-algorithms-string/"/>
    <id>http://yoursite.com/2019/10/30/python-algorithms-string/</id>
    <published>2019-10-30T11:44:55.000Z</published>
    <updated>2020-01-17T09:19:03.813Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;1-1-旋转字符串&quot;&gt;&lt;a href=&quot;#1-1-旋转字符串&quot; class=&quot;headerlink&quot; title=&quot;1.1 旋转字符串&quot;&gt;&lt;/a&gt;1.1 旋转字符串&lt;/h2&gt;&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;给定一个字符串，要求把字符串前面的若干个字符移动到字符串的尾部，如把字符串“abcdef”前面的2个字符’a’和’b’移动到字符串的尾部，使得原字符串变成字符串“cdefab”。请写一个函数完成此功能，要求对长度为n的字符串操作的时间复杂度为 O(n)，空间复杂度为 O(1)。&lt;/p&gt;
&lt;h4 id=&quot;方法：三步反转法&quot;&gt;&lt;a href=&quot;#方法：三步反转法&quot; class=&quot;headerlink&quot; title=&quot;方法：三步反转法&quot;&gt;&lt;/a&gt;方法：三步反转法&lt;/h4&gt;&lt;p&gt;对于这个问题，换一个角度思考一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="algorithms" scheme="http://yoursite.com/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>window10 快捷键</title>
    <link href="http://yoursite.com/2019/10/30/window10-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2019/10/30/window10-快捷键/</id>
    <published>2019-10-30T02:29:30.000Z</published>
    <updated>2019-10-31T05:14:50.812Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;1-常用window10-快捷键菜单&quot;&gt;&lt;a href=&quot;#1-常用window10-快捷键菜单&quot; class=&quot;headerlink&quot; title=&quot;1.常用window10 快捷键菜单&quot;&gt;&lt;/a&gt;1.常用window10 快捷键菜单&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Win+D：显示桌面&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;　　&lt;strong&gt;Win+E：打开资源管理器&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;　　&lt;strong&gt;Win+I：打开设置界面&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;　　&lt;strong&gt;Win+L：锁定屏幕&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;　　&lt;strong&gt;Win+R：打开运行窗口&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="巧技" scheme="http://yoursite.com/categories/%E5%B7%A7%E6%8A%80/"/>
    
    
      <category term="win10快捷键" scheme="http://yoursite.com/tags/win10%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>协程与异步I/O</title>
    <link href="http://yoursite.com/2019/10/29/%E5%8D%8F%E7%A8%8B%E4%B8%8E%E5%BC%82%E6%AD%A5I-O/"/>
    <id>http://yoursite.com/2019/10/29/协程与异步I-O/</id>
    <published>2019-10-29T09:07:09.000Z</published>
    <updated>2019-10-30T03:21:11.169Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://www.liujiangblog.com/course/python/83&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;通常在Python中我们进行并发编程一般都是使用多线程或者多进程来实现的，对于CPU计算密集型任务由于GIL的存在通常使用多进程来实现，而对于IO密集型任务可以通过线程调度来让线程在执行IO任务时让出GIL，从而实现表面上的并发。&lt;/p&gt;
&lt;p&gt;其实对于IO密集型任务我们还有一种选择就是协程。&lt;strong&gt;协程，又称微线程，英文名Coroutine&lt;/strong&gt;，是运行在单线程中的“并发”，协程相比多线程的一大优势就是省去了多线程之间的切换开销，获得了更高的运行效率。Python中的异步IO模块asyncio就是基本的协程模块。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="thread" scheme="http://yoursite.com/tags/thread/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python thread 基础概念与方法</title>
    <link href="http://yoursite.com/2019/10/29/python-thread-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E4%B8%8E%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/10/29/python-thread-基础概念与方法/</id>
    <published>2019-10-29T08:10:46.000Z</published>
    <updated>2019-10-31T03:25:20.560Z</updated>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://www.liujiangblog.com/course/python/79&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在Python3中，通过threading模块提供线程的功能。原来的thread模块已废弃。但是threading模块中有个Thread类（大写的T，类名），是模块中最主要的线程类，一定要分清楚了，千万不要搞混了。&lt;/p&gt;
&lt;p&gt;threading模块提供了一些比较实用的方法或者属性，例如：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法与属性&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;current_thread()&lt;/td&gt;
&lt;td&gt;返回当前线程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;active_count()&lt;/td&gt;
&lt;td&gt;返回当前活跃的线程数，1个主线程+n个子线程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;get_ident()&lt;/td&gt;
&lt;td&gt;返回当前线程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enumerater()&lt;/td&gt;
&lt;td&gt;返回当前活动 Thread 对象列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;main_thread()&lt;/td&gt;
&lt;td&gt;返回主 Thread 对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;settrace(func)&lt;/td&gt;
&lt;td&gt;为所有线程设置一个 trace 函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setprofile(func)&lt;/td&gt;
&lt;td&gt;为所有线程设置一个 profile 函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stack_size([size])&lt;/td&gt;
&lt;td&gt;返回新创建线程栈大小；或为后续创建的线程设定栈大小为 size&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TIMEOUT_MAX&lt;/td&gt;
&lt;td&gt;Lock.acquire(), RLock.acquire(), Condition.wait() 允许的最大超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="-- thread" scheme="http://yoursite.com/tags/thread/"/>
    
  </entry>
  
</feed>
